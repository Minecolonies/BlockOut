/*
    This is the primary blockout project gradle file.
    BlockOut is build up out of several individual minecraft mods that are grouped together under the BlockOut umbrella in game.

    This parent project configures all projects in a way that makes them work together and saves a lot of duplicate code.
 */

//We need this in the parent project since it else not discovered by the subprojects.
buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

//Now configure all subprojects.
subprojects {
    System.out.println(name)
    
    //Add the central repository so that we always have access to our cached dependencies.
    repositories {
        maven {
            name 'LDTTeam - Modding'
            url 'https://ldtteam.jfrog.io/ldtteam/modding/'
        }
    }

    //Setup the plugins that we need.
    apply plugin: 'idea'
    apply plugin: 'java'

    //All mods have the same test harness.
    //JUNIT, MOCKITO, POWERMOCK and HAMCREST are being added here.
    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile "org.mockito:mockito-core:1.+"
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'pl.pragmatists', name:'JUnitParams', version: '1.1.1'

        compile 'com.intellij:annotations:+@jar'
    }

    group = "com.ldtteam"
    version = minecraft_version.toString() + "-" + System.getenv().get("Version")
    archivesBaseName = "blockout"

    //Setup for which java version we are compiling
    //Minecraft defaults to 1.8, anything higher does currently not work with Forge.
    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
    }

    //Setup the compiler to output all information we need.
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint"
    }

    //Create a javadoc jar
    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from "build/docs/javadoc"
        classifier "javadoc"
    }

    //The primary jar needs to have a javadoc jar build
    //Ensures it is created and ready to upload.
    jar {
        dependsOn tasks.javadocJar
    }
}

project(':BlockOut - Api') {
    //Set up the shading of the jars into the primary project.
    configurations {
        shade{}

        compile.extendsFrom shade
    }

    //TODO: Shade JVoxelizer api into the api.
    dependencies {
    }

    jar {
        from (configurations.shade.files){
            include '*'
            into 'META-INF/libraries'
        }

        manifest {
            attributes([
                'ContainedDeps': (configurations.shade.files.collect { it.name }.join(' '))
            ])
        }
    }
}

project(':lang:BlockOut - Languages - JSON') {
    
}

project(':BlockOut - Main') {
    //Set up the shading of the jars into the primary project.
    configurations {
        shade{}

        compile.extendsFrom shade
    }

    dependencies {
        shade project(':BlockOut - Api')
        compile 'io.netty:netty-all:4.1.9.Final'
        compile 'org.apache.httpcomponents:httpclient:4.3.3'
    }

    jar {
        from (configurations.shade.files){
            include '*'
            into 'META-INF/libraries'
        }

        manifest {
            attributes([
                    'ContainedDeps': (configurations.shade.files.collect { it.name }.join(' '))
            ])
        }
    }
}

project(':launcher:forge:BlockOut - Launchers - Forge - 1.12')
{
    apply plugin: 'net.minecraftforge.gradle.forge'
    apply plugin: 'maven'

    archivesBaseName = "blockout_forge_1_12"

    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
    }

    minecraft {
        version = minecraft_version + "-" + forge_version
        runDir = "run"

        mappings = "${blockout_mappings}"

        replace "@VERSION@", project.version
        replace "@MCVERSION@", minecraft_version
        replace "@FORGEVERSION@", forge_version

        // Set the jar signature in code prior to compilation, if it exists as a build property
        if (project.hasProperty("signature")) {
            replace "@FINGERPRINT@", project.signature
        }
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version':project.version, 'mcversion':project.minecraft.version
        }

        // copy everything else except the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }

    task signJar(type: SignJar, dependsOn: reobfJar) {
        onlyIf { // Skip the task if our secret data isn't available
            project.hasProperty('keyStore')
        }

        if (project.hasProperty('keyStore')) {
            keyStore = project.keyStore // This needs to be a path to the keystore file
            alias = project.keyStoreAlias
            storePass = project.keyStorePass
            keyPass = project.keyStoreKeyPass
            inputFile = jar.archivePath
            outputFile = jar.archivePath
        }
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file('out')
            testOutputDir = file('out_test')
        }
    }

    build.dependsOn signJar

    configurations {
        shade{}

        compile.extendsFrom shade
    }

    dependencies {
        shade project(':BlockOut - Api')
        shade project(':BlockOut - Main')
    }
    
    jar {

        manifest {
            attributes([
                    'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:api",
                    'Timestamp': System.currentTimeMillis(),
                    'FMLAT': "blockout_at.cfg"
            ])
        }

        classifier 'universal'
    }
}

/*
project(':utilities') {
    dependencies {
        compile project(':main')
    }
}

task runTestModClient {
    group 'runtime'
    description 'Starts a new client with the testmod enabled'

    dependsOn project(':testmod').tasks.runClient
}

task runTestModServer {
    group 'runtime'
    description 'Starts a new server with the testmod enabled'

    dependsOn project(':testmod').tasks.runServer
}

task runGuidebookClient {
    group 'runtime'
    description 'Starts a new client with the guidebook enabled'

    dependsOn project(':guidebook').tasks.runClient
}

task runGuidebookServer {
    group 'runtime'
    description 'Starts a new server with the guidebook enabled'

    dependsOn project(':guidebook').tasks.runServer
}

project('testmod') {
    dependencies {
        compile project(':main')
        compile project(':utilities')
    }
}

project('guidebook') {
    dependencies {
        compile project(':main')
        compile project(':utilities')
    }
}*/

task setupDecompWorkspace {
    group 'build setup'
    description 'Sets up the build environment for IDEA'

    subprojects.each {
        if (it.tasks.findByName("setupDecompWorkspace") != null)
        {
            dependsOn("${it.path}:setupDecompWorkspace" )
        }
    }

    dependsOn (project(':launcher:forge:BlockOut - Launchers - Forge - 1.12').tasks.genIntellijRuns)
}