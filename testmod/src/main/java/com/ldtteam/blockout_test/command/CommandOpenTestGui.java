package com.ldtteam.blockout_test.command;

import com.ldtteam.blockout.builder.data.builder.BlockOutGuiConstructionDataBuilder;
import com.ldtteam.blockout.element.advanced.list.constructiondatabuilder.ListConstructionDataBuilder;
import com.ldtteam.blockout.element.simple.Button;
import com.ldtteam.blockout.proxy.IProxy;
import com.ldtteam.blockout_test.tests.BlockOutUITestManager;
import com.ldtteam.blockout_test.tests.IBlockOutGuiTest;
import com.mojang.brigadier.Command;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import net.minecraft.command.CommandSource;
import net.minecraft.command.Commands;
import net.minecraft.entity.player.ServerPlayerEntity;
import net.minecraft.util.ResourceLocation;

public class CommandOpenTestGui implements Command<CommandSource>
{

    public static void register(final CommandDispatcher<CommandSource> commandSourceCommandDispatcher)
    {
        commandSourceCommandDispatcher.register(Commands.literal("bo_test").executes(new CommandOpenTestGui()));
    }

    @Override
    public int run(final CommandContext<CommandSource> context) throws CommandSyntaxException {
        final ServerPlayerEntity player = context.getSource().asPlayer();
        IProxy.getInstance()
            .getGuiController()
            .openUI(player,
                iGuiKeyBuilder -> iGuiKeyBuilder.from(new ResourceLocation("blockout_test:gui/global_test_ui.json"))
                    .usingData(iBlockOutGuiConstructionDataBuilder -> iBlockOutGuiConstructionDataBuilder.withControl("tests",
                        ListConstructionDataBuilder.class,
                        listBuilder -> listBuilder
                            .withSource(BlockOutUITestManager.getInstance().getTestList())
                            .withTemplateConstructionData(new BlockOutGuiConstructionDataBuilder().withControl("test_button",
                                Button.ButtonConstructionDataBuilder.class,
                                buttonBuilder -> buttonBuilder
                                    .withClickedEventHandler((button, eventArgs) -> {
                                        final Object buttonContext = button.getDataContext();
                                        if (buttonContext instanceof IBlockOutGuiTest)
                                        {
                                            IBlockOutGuiTest iBlockOutUITest = (IBlockOutGuiTest) buttonContext;
                                            iBlockOutUITest.onTestButtonClicked(player, button, eventArgs);
                                        }
                                    }))
                                .build())))
                    .withDefaultItemHandlerManager()
                    .forEntity(player));

        return 0;
    }
}
